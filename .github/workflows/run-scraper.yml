name: Run Amazon INF Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  UK_TARGET_HOURS: '09 12 18'

jobs:
  check-time:
    runs-on: ubuntu-latest
    outputs:
      run_job: ${{ steps.check_hour.outputs.run_job }}
    steps:
      - name: Check current UK hour against target hours
        id: check_hour
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger detected. The main job will run."
            echo "run_job=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          CURRENT_UK_HOUR=$(TZ="Europe/London" date +'%H')
          echo "Current UK hour is: ${CURRENT_UK_HOUR}"
          echo "Target hours are: ${{ env.UK_TARGET_HOURS }}"
          if [[ " ${{ env.UK_TARGET_HOURS }} " =~ " ${CURRENT_UK_HOUR} " ]]; then
            echo "It's a target time. The main job will run."
            echo "run_job=true" >> $GITHUB_OUTPUT
          else
            echo "Not a target time. The main job will be skipped."
            echo "run_job=false" >> $GITHUB_OUTPUT
          fi

  scrape:
    needs: check-time
    if: needs.check-time.outputs.run_job == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 1. Check out repository
        uses: actions/checkout@v4

      - name: 2. Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 3. Install Python dependencies
        run: pip install -r requirements.txt

      - name: 4. Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: "${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: 5. Install Playwright browsers & dependencies
        run: python -m playwright install --with-deps chromium

      - name: 6. Build config.json from Secrets
        run: |
          echo '{
            "debug": false,
            "login_url": "${{ secrets.LOGIN_URL }}",
            "login_email": "${{ secrets.LOGIN_EMAIL }}",
            "login_password": "${{ secrets.LOGIN_PASSWORD }}",
            "otp_secret_key": "${{ secrets.OTP_SECRET_KEY }}",
            "inf_webhook_url": "${{ secrets.INF_WEBHOOK_URL }}",
            "email_report": false,
            "enable_supabase_upload": false,
            "target_store": {
              "store_name": "${{ secrets.TARGET_STORE_NAME }}",
              "merchant_id": "${{ secrets.TARGET_MERCHANT_ID }}",
              "marketplace_id": "${{ secrets.TARGET_MARKETPLACE_ID }}"
            }
          }' > config.json

      - name: 7. Run the INF scraper
        run: python inf.py

      - name: 8. Upload artifacts
        # This guarantees artifacts are uploaded on success or failure for debugging.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: inf-scraper-output-${{ github.run_id }}
          path: |
            output/
            inf_app.log
            state.json
          retention-days: 7